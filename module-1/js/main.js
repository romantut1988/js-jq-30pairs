// Сценарии, выполняемые на стороне клиента.
console.log("Hello from script");




// Ключевые и зарезервированные слова
/* await, break, case, catch, class, const, continue,
 debugger, default, delete, do, else, export, extends,
  finally, for, function, if, import, in, instanceof, 
  let, new, return, static, super, switch, this, throw,
   try, typeof, var, void, while, with, yield */





// Типы данных Undefined, Null, Boolean, String, Symbol, Number, Object.
// "Undefined" имеет только одно значение "undefined"
// "Null" имеет "null" возникает в результате неудачной операции присваивания.   
// "Boolean" имеет два значения «true» и "false". 
/*"Number" предназначен для хранения чисел. 
Стандартом установлено, что этот тип имеет ровно 18437736874454810627 различных значений */
/*"Symbol" объединяет в себе значения, которые не относятся к типу «String» но могут быть
 использованы в качестве ключа в типе «Object».*/
// "Number" для работы с числами.
// "Object" для группировки данных.





// Арифметические операторы
/*
Сложение                       x + y
Вычитание                      x — y
Умножение                      x * y  
Деление                        x / y
Остаток от деления             x % y
Возведение в степень           x % y
Инверсия(смена знака)          -х
Инкремент(увеличение на 1)     х-- или –х
Декремент(уменьшение на 1)     х-- или –х
*/






//ESMA - знакомство https://www.ecma-international.org/publications-and-standards/standards/ecma-262/





//  Операторы отношений
// Нестрогие операции сравнения имеют запись «==») или «!=»
console.log(3 == '3');
console.log(1 == true);
console.log('' == false);
// Строгие операции проверяют равенство при помощи выражения «===», а неравенство — «!==»
console.log(3 === '3');
console.log(1 === true);
console.log('' === false);
// Для проверки отношений двух операндов применяются следующие операторы:
// < меньше читается так левый операнд меньше правого
// > больше левый операнд больше правого
// <= меньше-равно левый операнд меньше или равен правому
// >= больше-равно левый операнд больше или равен правому
console.log(2 < 3);
console.log(3 > 2);
console.log(2 > 2);
console.log(2 <= 3);
console.log(3 >= 2);
console.log(2 >= 2);
// Сравнение строк:::
console.log('3' > '10');
console.log(3 > '10');
console.log('3' > '10');





//Логические операторы
//          || (ИЛИ),
//          && (И),
//          !  (НЕ),
/* Для логических операций также существует приоритет выполнения.
Операция «И» (аналог умножения) имеет приоритет выше, чем операция «ИЛИ» (аналог сложения). */
/* Оператор логического НЕ! является унарным оператором, помещаемым перед одиночным операндом.
Он преобразует значение затем инвертирует это значение в противоположное
 и возвращает, противоположное значение. */
//Приоритеты !!!
/* Оператор НЕ!, будучи унарным, имеет высокий приоритет(16) и тесно связан с своим аргументом.
Приоритет оператора И && больше, чем приоритет оператора ИЛИ || – соответственно 6 и 5. */





//Оператор присваивания =
/* Предположим следующие переменные и их значения
  x = 5
  y = 10
  z = 25
  x = y           x будет присвоено значение 10
  x = y = z       x, y и z будут равны 25
  */






// Битовые операторы - это сложные операции.




/* Приоритет операторов
https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#%D1%82%D0%B0%D0%B1%D0%BB%D0%B8%D1%86%D0%B0
let x, y
console.log(x,y);
x = 10 + 5 - 2 * 6;
console.log(x);
x = y = 10 + 5 - 2 * 6;
последовательность в таблице
console.log(x);
*/







// Оператор typeof - это функция
/*Примеры:
Чтобы узнать тип данных переменной или результата выражения применяется оператор «typeof».
В качестве значения оператор возвращает название типа.
Например, выражение «typeof 2» даст результат «number»,
«typeof “2”» — «string»,
«typeof true» — «boolean».
И так далее для всех типов данных.
Исключением является выражение «typeof null», результат которого представляет собой «object».
*/








//                                  Взаимодействие  с пользователем !!!

/* Ввод/вывод данных. Диалоговые окна - это дополнительные небольшие окна ,
которые появляются на веб-странице и сообщают пользоваателю информацию и ввод данных, подтверждение действий и т.д.
*/
// alert();
// confirm();
// prompt();




// Условия итог будет два выражения "true - истинное выражение" "false - ложь".
/* Примеры: Подтверждения действий, авторизации (проверки логина и пароля), разблокировки программ;
Проверки ограничений: на возраст пользователя, на время суток, на день недели.
Проверки правильности пользовательского ввода. Очень часто, особенно в Веб-разработке,
от пользователя требуется адрес электронной почты или номер телефона.
При вводе этих данных пользователь может опечататься,
забыть переключить раскладку клавиатуры или нарочно исказить вводимые данные.
Проверки успешной работы других частей программы, если от них зависят дальнейшие процессы,
проверки на отсутствие ошибок расчетов или преобразований.
*/
/*Основным средством, позволяющим обработать условие,
т.е.выполнить некоторую часть программы в зависимости от результата условного выражения,
является оператор «if».
*/

// просмотрим код в console --- if(1 > 0) alert("Yes")

/*
Задание: в переменной «х» хранится разница вчерашнего и сегодняшнего курса валюты.
Нас интересует только величина отклонения, то есть если значение отрицательное,
то нужно убрать знак.Другими словами, нужно определить модуль числа «х».

Решение: при помощи условного оператора это сделать проще и быстрее, 
чем через библиотеку математических функций. 
Если число «х» меньше нуля, 
применим оператора смены знака «–х» и результат сохраним в той же переменной (х = –х):
if(x<0) 
  x = -x;
*/

/* 
Задание: в переменной «х» хранится сумма покупки.
Если она превышает 1000, уменьшить ее на скидку в 10%

Решение: уменьшение на 10% эквивалентно вычитанию из числа одной десятой его части.
То есть «х» уменьшенный на 10% это «х – х/10» или «х – 0.9х». 
После вычитания, результат нужно сохранить в той же переменной. С учетом этого запишем:
if(x>1000)
    x = x — 0.9*x
*/

// If else - условный оператор содержащий две секции инструкций.

/*
Задание: в переменной «х» хранится некоторое число.
Необходимо проверить его четность и результат сохранить в переменной «parity».

Решение: четное число делится на 2 нацело.
То есть имеет нулевой остаток от деления на 2.
В формализме JavaScript остаток от деления вычисляется оператором «%».
Условие на четное значение будет выглядеть как «x% 2 == 0».
В противном случае, число является нечетным 
if(x % 2 == 0)  
     parity = "even";
else
    parity = "odd";
Условные операторы могут быть вложенными один в другой.
То есть в любом из условных блоков могут быть использованы новые условные операторы со своими блоками.
В них также могут быть условные операторы — ограничений на степень вложенности нет.
Это позволяет проверять условия одно за другим, обрабатывая на каждое из них отдельно.
*/

/*В качестве примера рассмотрим следующую задачу.
Банковское округление (англ. banker's rounding) обозначает округление к ближайшему чётному числу.
То есть 2.7 округляется до 2, а 3.2 до 4 (хотя при обычном округлении оба значения привели бы к результату 3).
В переменной «х» хранится дробное число, нужно написать программу,
реализующую банковское округление этого числа и сохраняющую результат в переменной «bx».

Решение. Во-первых, попробуем использовать обычное округление Math.round(х)
и проверим, может мы сразу получим четное число, тогда его нужно просто сохранить в переменной «bx»:
Math.round(х) --- это метод, который возвращает число, округлённое к ближайшему целому.
Если же результат обычного округление нечетен,
то у нас есть два возможных варианта:
а) число было округлено вверх, например 2,7 до тройки или
б) число было округлено вниз, как 3,2 к той же тройке.
В первом случае от результата округления надо вычесть единицу,
получив меньшее из четных чисел (2,7 округляется к двойке).
Во втором варианте единицу к результату нужно добавить (3,2 округляется к четверке).
Это можно реализовать вторым условным оператором,
вложенным в блок «else» первого оператора. Итоговый код, решающий задачу, примет следующий вид:
if( Math.round(x) % 2 == 0 )
    bx = Math.round(x)
else {
    if( x < Math.round(x) )
        bx = Math.round(x) — 1
    else
        bx = Math.round(x) + 1
}
*/






// Тернарный оператор - ? Его цель вернуть Результат !!!
/*
Условный(тернарный) оператор - единственный оператор в JavaScript,
принимающий три операнда: условие, за которым следует знак вопроса(?),
затем выражение, которое выполняется, если условие истинно,
сопровождается двоеточием(: ), и, наконец, выражение, которое выполняется,
если условие ложно.Он часто используется в качестве укороченного варианта условного оператора if.
*/
/* Пример 
let age = 17;
age > 18 ? console.log("Старше 18 лет") : console.log("Младше 18 лет");

или так запишем 
if(age > 18) {
    console.log("Старше 18 лет")
} else {
    console.log("Младше 18 лет");
}
*/





// Switch 

let z = 4;
switch (z) /* Работаем с объектом z*/ {
    case 1: /* Если z = 1 */
        alert("z равно 1"); /* Выполняем действие */
        break;

    case 2: /* Если z = 2 */
        alert("z равно 2"); /* Выполняем действие */
        break;

    default: /* Если z не равен 1 или 2 */
        alert("z НЕ равен 1 или 2"); /* Выполняем действие */
}

/*
Найдите ошибку:
 программа должна запросить у пользователя число от 1 до 6 и вывести сообщение о четности числа
 (odd — нечетное, even — четное), либо "Out of range", если число выходит за указанный диапазон);
*/
x = +prompt("Input number from 1 to 6");
switch (x) {
    case 2:
    case 4:
    case 6: alert("even");
        break;
    case 1:
    case 3:
    case 5: alert("odd");
    // break;
    default: alert("Out of range");
}


/*
Задача для самостоятельного решения: пользователь вводит число «х».
Считаем, что пользовательский ввод ограничен значениями от 1 до 10.
Программа выводит числа от «х» до 5, если х≤5, иначе — числа от «х» до 10.
*/
// Задание для самостоятельной работы
// 1. Напишите скрипт, который запрашивает у пользователя подтверждение некоторого действия(используя диалог confirm)
//  и после его ответа выводит сообщение «Подтверждено» или «Отменено».
// 2. Напишите скрипт, который запрашивает у пользователя пароль подтверждения некоторого действия.
// Допускается три возможных пароля(«Step», «Web» и «JavaScript»).
// После ввода пароля скрипт должен вывести сообщение «Подтверждено» или «Отменено».
// 3. Напишите скрипт, который запрашивает у пользователя число «х», проверяет его на принадлежность диапазону 0..100
// и выводит соответствующее сообщение
// (например, 10 — принадлежит, –10 — не принадлежит, 0 — принадлежит, 200 — не принадлежит).
// 4. Напишите скрипт, который запрашивает у пользователя два числа «х» и «у»,
// сравнивает их величины и выводит одно из
//  сообщений: «x > y», «x < y» или  «x = y» в зависимости от введенных данных
// 5. Напишите скрипт, который запрашивает у пользователя число «х»,
// «ранжирует» его по диапазонам 0..100, 101..200, 201..300
// и выводит сообщение о принадлежности или несоответствии ни одному из них
// (например, 30 принадлежит диапазону 0..100; 250 — диапазону 201..300;  –10 или 500 — ни одному).
// 6. Напишите скрипт, который запрашивает у пользователя цифру и выводит ее название:
// 0 — «ноль», 1 — «единица», 2 — «двойка» и т.д.Если переменная не является цифрой, выводится сообщение «не цифра».







// Циклы - Программные механизмы, позволяющие несколько раз выполнить один и тот же блок кода.
/*  Повторяемый блок кода носит название «тело цикла» (loop body),
а процесс его выполнения — итерация(iteration).
*/
/*Виды Циклов:
While;
Do while;
For;
For in, for of;
Break, continue;

While в круглых скобках указывается условное выражение,
после скобок — инструкция для выполнения (тело цикла).
Цикл обеспечивает повторное выполнение тела до тех пор, пока условие остается истинным.
Для того чтобы цикл имел окончание, в теле цикла должны быть предусмотрены инструкции,
оказывающие некоторое влияние на условие повторения цикла.
i = 1;
while(i < 10) {
        console.log(i);
           i++;
}
Цикл While удобно применять в случаях, когда
заранее неизвестно количество повторов тела цикла,
условие окончания цикла прямо не зависит от цикловой переменной,
цикл зависит от входящих данных, например, от действия пользователя.

Do while Тело цикла (выражение statement) выполняется повторно до тех пор,
пока условие (condition) остается истинным.
Несмотря на то, что операторные рамки «do» и «while» позволяют однозначно определить начало и конец тела цикла,\
при использовании нескольких инструкций в цикле их все равно нужно объединять группирующим оператором «{}».
do {
  // тело цикла
} while (condition);

For Цикл-счетчик (или цикл со счетчиком) организуется при помощи оператора «for».
Синтаксис оператора, кроме тела цикла, содержит три декларативных блока:
for (initialization; condition; expression)
statement
initialization - используется для начальной инициализации цикловой переменной.
condition - содержит условие, при котором цикл продолжается.
expression -  задает выражение для изменения цикловой переменной.
Типичным примером записи оператора «for» является следующий:
for(i=0; i<5; i++)
console.log(i);
(все дальнейшие примеры можно скопировать в консоль и проверить на работоспособность)
i=0;
for( ; i<5; i++)
console.log(i);
 Аналогично, если цикловая переменная меняет значение в теле цикла, то последний блок также можно не указывать.
 i=0;
  for( ; i<5 ; ) {
   console.log(i);
        i++;
}

For in, for of  --- Будем разбирать на других уроках более детально !!!
Циклы «for in» и «for of» позволяют перебирать свойства комплексных объектов
(объединяющих в себе несколько других объектов),
используя сокращенную запись оператора «for».

Break, continue - Для того чтобы иметь возможность дополнительного управления процессом выполнения цикла
предусмотрены операторы «break» и «continue». Эти операторы могут применяться во всех рассмотренных выше циклах.
Оператор "break" полностью останавливает выполнение цикла, независимо от состояния циклового условия.

Оператор "continue" останавливает выполнение данной итерации цикла.
Если цикловое условие позволяет, то будет запущена следующая итерация.
Такое поведение может быть полезно при игнорировании каких-либо данных,
например, пробелов и дефисов при анализе номера телефона.

Понятие метки - выполнения циклом «break» и «continue» действуют на тот цикл,
в теле которого они применяются.
Если анализируемые данные являются многомерными или имеют глубокую степень вложенности,
то их перебор, скорее всего, будет организован при помощи нескольких циклов, вложенных друг в друга.
В такой ситуации может появиться необходимость прервать итерацию или выполнение «верхнего» цикла,
а не только данного. Для реализации такой возможности в JavaScript предусмотрены метки.
Метка представляет собой идентификатор (имя),
сформированный согласно общим правилам именования переменных,
после которого указывается двоеточие «:». Метка служит для указания определенного места в коде,
как правило — цикла.
В следующем примере использованы две метки: «loopI» и «loopJ»,
относящиеся к циклам с соответствующей цикловой переменной  (i или j).
loopI: for(i=0;i<5;i++)
   loopJ: for(j=0;j<5;j++) {
        console.log(i,j);
        if(j==3) break loopI;
}
После оператора «break» указывается метка цикла,
который нужно прервать. Если метку не указывать или указать «loopJ»,
то при условии (j==3) будет прекращаться вложенный цикл,
при этом внешний цикл будет продолжать работать.
Если же указать метку «loopI», то прерываться будет первый цикл,
полностью останавливая работу приведенного блока.
Аналогичным образом можно использовать метки и с оператором «continue», прерывая итерацию заданного цикла.
*/








// Функции
/*Синтаксис объявления функции.
Функции Пользовательские функции создаются при помощи ключевого слова "function".
Синтаксис объявления функции имеет следующий вид:
function nameOfFunction (в круглых скобках указываются параметры, которые будут приниматься в функции
    argument1, argument2) {
 в фигурных скобках описывается тело функции,
}
!!! тело функции можно представить себе, как отдельную программу.
Эта программа является достаточно независимой: в ней могут описываться собственные переменные,
организовываться свои цыклы,проверяться необходимые условия и т.п.
— в теле функции доступны все средства программирования.
Пример::
function show5Blocks() {
        for(i=1;i<=5;i++)
        document.write("<h2> Header "+i+"</h2>");
    }
show5Blocks() - вызов функции...
*/

// Параметры функции
/* Пример
function bankerRound(x) {
     if (Math.round(x) % 2 == 0)
      return Math.round(x);
       else {
         if (x < Math.round(x)) return Math.round(x) - 1;
          else
           return Math.round(x) + 1;
         }
}
*/


// Детальнее о функциях
// Объект arguments
