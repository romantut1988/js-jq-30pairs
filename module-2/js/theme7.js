// ООП (Объектно-ориентированное программирование)
// - создает некий шаблон объекта, в котором описываете его свойства 
// (некие переменные, или ключи объекта) и методы взаимодействия с этим объектом (функции), 
// как бы моделируя в коде поведение реальных объектов. 
// С появлением классов в JavaScript этот механизм не слишком-то изменился.
// То есть в JavaScript ООП основано на прототипах.
// Прототип — это объект, который содержит данные о свойствах и методах всех объектов одного типа. 
// Кроме того, все объекты являются наследниками класса Object, описанного в ядре JS. 
// Можно сказать, что прототипом любого объекта в JS является класс Object. 
// Прототипы в JS — это возможность «передать по наследству»
// всем объектам одного типа некие характеристики, причем таким образом,
// чтобы каждый из объектов мог воспользоваться этими характеристиками в определенной ситуации.

// Пример. 
/*
Например, у нас есть 2 группы студентов, представленные в виде массивов.
Нам нужно перевести 2 - х студентов из одной группы в другую.
Сделаем это с помощью методов массивов splice() и concat().
*/
let group1 = ['Deniels', 'Jonhson', 'Overton', 'Stufford', 'Templeton'],
    group2 = ['Greenwood', 'Liner', 'Takerman'];
let students = group1.splice(2, 2);
console.log(students);
group2 = group2.concat(students);
console.log(group1, group2);
// Лучше создавать объекты одного типа (или с одним прототипом) в JavaScript.
// Для того чтобы создать основу для прототипирования объекта в JavaScript 
// обычно используют функции-конструкторы или классы. 
